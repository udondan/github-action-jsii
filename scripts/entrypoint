#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

export TERM=xterm
yellow=$(tput setaf 003)
normal=$(tput sgr0)

print() {
    echo "${yellow}$1${normal}"
}

begin() {
    print "üì¶ Publishing $1 package..."
}

error() {
    print "‚ùå $*"
    exit 1
}

complete() {
    print "‚úÖ Done"
}

# All env vars that can be passed in, are handled in two variants
# FOO, which can be passed in by the user when running locally
# INPUT_FOO, which is the prefixed version passed in by GitHub actions
# The var function covers both cases. Furthermore it converts the variable to
# a boolean, if the 2nd parameter is true
var() {
    local name="$1"
    local value

    if [[ "${GITHUB_ACTIONS:-}" == "true" ]]; then
        name="INPUT_${name}"
    fi
    if [[ "${2:-}" = true ]]; then
        value=$(echo "${!name:-}" | tr "[:upper:]" "[:lower:]")
        if [[ "${value}" == "true" || "${value}" == "yes" ]]; then
            eval "$1="'true'""
        else
            eval "$1="'false'""
        fi
    else
        eval "$1="'${!name:-}'""
    fi
}

# Fails if the var named in 1st param is undefined/empty
require() {
    [ -z "${!1}" ] && error "$1 required"
    return 0
}

# Fails if the string given in 1st param is not a directory
require_dir() {
    [ ! -d "$1" ] && error "Require target directory as first parameter"
    return 0
}

require_file() {
    [ ! -f "$2" ] && error "Require target file as first parameter"
    [ "${2##*.}" != "$1" ] && error "Target file needs to be of type $1, got ${2##*.}"
    return 0
}

var DEBUG true
var VERSION
var BUILD_SOURCE true
var BUILD_PACKAGES true
var NPM_TOKEN
var PYPI_TOKEN
var NUGET_TOKEN
var GITHUB_TOKEN
var GITHUB_REPOSITORY

if [[ "${DEBUG}" = true ]]; then
    set -x
fi

# shellcheck disable=SC1090
source <(cat /scripts/publish/*)

# Update the version if it was passed
if [[ -n "${VERSION}" ]]; then
    print "Updating package version to ${VERSION}..."
    npm version "${VERSION}" --allow-same-version --no-git-tag-version
fi

if [[ "${BUILD_SOURCE}" = true ]]; then
    print "Installing dependencies..."
    npm install

    print "Building source..."
    npm run build
fi

if [[ "${BUILD_PACKAGES}" = true ]]; then
    print "Building packages..."
    rm -rf dist/*
    npm run package
fi

# Publish to npm if token is present
[ -n "${NPM_TOKEN}" ] && publish_to_npm dist/js/*

# Publish to PyPI if token is present
[ -n "${PYPI_TOKEN}" ] && publish_to_pypi dist/python

# Publish to NuGet if token is present
[ -n "${NUGET_TOKEN}" ] && publish_to_nuget dist/dotnet/*.nupkg

# Publish to Maven if token is present
[ -n "${GITHUB_TOKEN}" ] && publish_to_maven dist/java

exit 0
